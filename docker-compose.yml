# docker-compose.yml

services:
  frontend:
    # Apunta al directorio donde se encuentra el Dockerfile del frontend
    build: ./frontend
    ports:
      # Mapea el puerto 80 del host (el puerto HTTP estándar)
      # al puerto 80 dentro del contenedor Nginx.
      - "80:80"
    # En producción, NO queremos montar el código fuente local.
    # Docker construirá la imagen con la aplicación ya compilada.
    # Tampoco necesitamos el volumen para node_modules.
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    
    # Las variables de entorno para la API ahora se manejan en la etapa de construcción del Dockerfile
    # o se inyectan en tiempo de ejecución si es necesario (métodos más avanzados).
    # Si tu frontend necesita la URL de la API en tiempo de ejecución (ej. para llamadas AJAX),
    # podrías necesitar una forma de inyectarla (ej. usando un archivo JS generado dinámicamente
    # o variables de entorno de Nginx si tu framework lo soporta).
    # Por ahora, asumimos que la URL de la API se maneja en la construcción si es posible,
    # o que la configuración de Nginx o la app manejan la comunicación entre contenedores.
    # environment:
    #   - NODE_ENV=production # Opcional, si tu app lo usa para algo en el cliente
    #   - REACT_APP_API_URL=http://backend:4000 # Esta variable ya no se pasa así directamente al contenedor Nginx

    # El comando ahora es el comando por defecto de Nginx para mantenerse en primer plano.
    # No necesitas definirlo aquí si el Dockerfile lo especifica con CMD.
    # command: ["nginx", "-g", "daemon off;"] # Esto ya está en el Dockerfile

    # Asegura que el frontend espere a que el backend esté listo (opcional pero recomendado)
    depends_on:
      - backend
    
    networks:
      - app-network

  backend:
    build: ./backend
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development # Puedes cambiar a 'production' si despliegas el backend en producción
      - PORT=4000
      - MONGODB_URI=mongodb://mongo:27017/empresas
      # CORS_ORIGIN debe ser la URL pública de tu frontend en el VPS
      # o permitir el origen de tu VPS si no usas un dominio.
      # Si accedes desde localhost en tu máquina (usando el mapeo 80:80),
      # podrías necesitar permitir localhost:80 o la IP de tu máquina.
      - CORS_ORIGIN=http://tu_ip_vps # O la URL de tu dominio
    command: ["npm", "run", "dev"] # Cambia a ["npm", "start"] o similar para producción
    depends_on:
      - mongo
    networks:
      - app-network

  mongo:
    image: mongo:4.4
    ports:
      # Generalmente no se expone el puerto de la base de datos al exterior (host) en producción
      # a menos que tengas una razón específica y controles el acceso estrictamente.
      # Si solo el backend necesita acceder, elimina esta línea:
      # - "27017:27017"
      # Si la dejas, asegúrate de configurar un firewall en tu VPS para bloquear este puerto externamente.
      - "27017:27017" # Dejado por ahora, pero considera eliminarlo en producción real
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=empresas
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongo-data:
    name: mongo-data

networks:
  app-network:
    driver: bridge
