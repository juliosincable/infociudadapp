
services:
  mongo:
    image: mongo:4.4
    container_name: mongodb_infociudadapp
    # Deja los puertos expuestos si necesitas acceder a MongoDB Compass desde tu máquina.
    # En producción real, considera NO exponer este puerto externamente y usa un firewall.
    ports:
      - "27017:27017"
    volumes:
      # Volumen para persistir los datos de MongoDB. Muy importante para no perder tus registros.
      - mongo-data:/data/db
    environment:
      # ¡IMPORTANTE! Define usuario y contraseña para el usuario root de MongoDB.
      # ¡CAMBIA 'root_user' y 'root_password' por valores REALES y SEGUROS!
      MONGO_INITDB_ROOT_USERNAME: root_user # <-- ¡CAMBIAR!
      MONGO_INITDB_ROOT_PASSWORD: root_password # <-- ¡CAMBIAR!
      # Establece la base de datos por defecto a 'empresas'
      MONGO_INITDB_DATABASE: empresas
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  backend:
    build: ./backend
    container_name: backend_infociudadapp
    ports:
      - "4000:4000"
    volumes:
      # Monta tu código local del backend en el contenedor para desarrollo en vivo
      - ./backend:/app
      - /app/node_modules # Evita que node_modules local sobrescriba el del contenedor
    environment:
      NODE_ENV: development
      PORT: 4000
      # ¡IMPORTANTE! Actualiza la URI de MongoDB para incluir las credenciales.
      # El nombre del host es 'mongo' porque así se llama el servicio en este docker-compose.yml.
      MONGODB_URI: mongodb://root_user:root_password@mongo:27017/empresas?authSource=admin # <-- ¡CAMBIAR USER Y PASS!
      # CORS_ORIGIN para desarrollo local (http://localhost) y posible entorno de VPS.
      # Si accedes desde http://localhost, el frontend está en puerto 80, así que el origen es http://localhost.
      CORS_ORIGIN: http://localhost # <-- ¡AJUSTADO PARA DESARROLLO LOCAL!
    command: ["npm", "run", "dev"]
    depends_on:
      - mongo # El backend depende del servicio de mongo
    networks:
      - app-network
    restart: always

  frontend:
    build: ./frontend
    container_name: frontend_infociudadapp
    ports:
      # Mapea el puerto 80 del host al puerto 80 del contenedor.
      # La URL de tu aplicación frontend será http://localhost
      - "80:80"
    # Los volúmenes están comentados para producción, lo cual es correcto.
    # Si quieres hot-reloading en desarrollo para el frontend,
    # descomenta las líneas 'volumes' y 'depends_on: - backend'
    # y ajusta el Dockerfile para desarrollo.
    # Para tu caso actual, asumimos que Docker construye el frontend.
    depends_on:
      - backend # El frontend depende del backend
    networks:
      - app-network
    restart: always

volumes:
  mongo-data:
    name: mongo-data # Nombre del volumen para persistir datos de MongoDB

networks:
  app-network:
    driver: bridge